services:
  kafka:
    image: apache/kafka:latest
    ports:
      - "9092:9092"
    environment:
      # KRaft mode configuration
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

      # Cluster configuration
      CLUSTER_ID: 4L6g3nShT-eMCtK--X86sw

      # Basic broker configuration
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3

      # Log configuration
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  producer:
    build:
      context: .
      dockerfile: devops/Dockerfile
    entrypoint: ["python", "src/producer.py"]
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
  normalize-consumer:
    build:
      context: .
      dockerfile: devops/Dockerfile
    entrypoint: ["python", "src/normalize_consumer.py"]
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
  # idr-consumer:
  #   build:
  #     context: .
  #     dockerfile: devops/Dockerfile
  #   entrypoint: ["python", "src/idr_consumer.py"]
  #   volumes:
  #     - .:/app
  #   env_file:
  #     - .env
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  api:
    build:
      context: .
      dockerfile: devops/Dockerfile.api
    ports:
      - "5000:5000"
    env_file:
      - .env

volumes:
  kafka_data:
